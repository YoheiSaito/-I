#!/usr/bin/python3
import os
import subprocess
import sys
import RPi.GPIO as GPIO
import pigpio
import time
from datetime import datetime
BINPATH="${HOME}/embed1_ws/final/bin/"

# mode 0 normal
# mode 1 denoise
# mode 2 hatch
# mode 3 negative
# mode 4 cartoon
# mode 5 panorama

cat = ['cat', '/var/www/html/Public/tmp/angle.dat']
modtop = ["none", "denoise","hatch","negative", "cartoon", "panorama"]
mode = len(modtop)-1
flg = 0

servo = pigpio.pi()

def flgup(pin):
	global flg
	flg = pin
def interrupt_configure():
	GPIO.add_event_detect(20, GPIO.FALLING, callback=flgup, bouncetime=500)
	GPIO.add_event_detect(26, GPIO.FALLING, callback=flgup, bouncetime=500)
def interrupt_disable():
	GPIO.remove_event_detect(20)
	GPIO.remove_event_detect(26)
def stop_uv4l():
	os.system("pkill uv4l >> /dev/null")
def start_uv4l():
	os.system("uv4l --auto-video_nr --driver raspicam --encoding mjpeg --width 640 --height 480 --quality 10 --server-option '--port=9000' >> /dev/null")
	pass
def main():
	global flg
	GPIO.setmode(GPIO.BCM)
	GPIO.setup(21, GPIO.OUT)
	GPIO.setup(20, GPIO.IN, pull_up_down=GPIO.PUD_UP)
	GPIO.setup(26, GPIO.IN, pull_up_down=GPIO.PUD_UP)
	GPIO.setup(19, GPIO.IN, pull_up_down=GPIO.PUD_UP)
	GPIO.setup(16, GPIO.IN, pull_up_down=GPIO.PUD_UP)
	interrupt_configure()
	GPIO.output(21 ,0)
	try:
		while(GPIO.input(19)==1 or GPIO.input(16)==1):
			turn(180-float(subprocess.check_output(cat)))
			if(flg==26):
				flg = chmod(flg)
			if(flg==20):
				flg = shot(flg)
	except KeyboardInterrupt:
		GPIO.cleanup()
		return 0
	for i in range(5):
		GPIO.output(21 ,1)
		time.sleep(0.2)
		GPIO.output(21 ,0)
		time.sleep(0.2)
	GPIO.cleanup()

def shutter(width=720, height=480, effect="none"):
	stop_uv4l()
	w = str(width)
	h = str(height)
	os.system("raspistill -t 1 -e jpg -o sample.jpg -ex antishake -awb fluorescent -mm average -ifx "\
	+effect+" -w "+w+" -h "+h);
	start_uv4l()

def chmod(pin):
	interrupt_disable()
	time.sleep(0.3)
	global mode
	mode = (mode+1)%len(modtop)
	for i in range(mode + 1):
		GPIO.output(21 ,1)
		time.sleep(0.2)
		GPIO.output(21 ,0)
		time.sleep(0.2)
	interrupt_configure()
	return 0

def shot(pin):
	interrupt_disable()
	time.sleep(0.3)
	# take picture
	GPIO.output(21, 1)
	if(mode == len(modtop)-1):
		move_shot()
		# flip all picture
		for i in range(1,3):
			os.system(BINPATH+"flip " + str(i)+".jpg")
		# marge treatment
		tm = datetime.now().strftime('%H:%M.%S') +"-"+ modtop[mode]
		todaydate = datetime.now().strftime('%Y/%m/%d/')
		os.system(BINPATH+"panorama 1.jpg 2.jpg "+tm+".jpg ")
		os.system("rm 1.jpg 2.jpg")
		os.system("mkdir -p /var/www/html/Public/tmp/img/"+todaydate)
		os.system("mv ./"+tm+".jpg /var/www/html/Public/tmp/img/"+todaydate)	
		print("save to rasteyo.local/img/"+todaydate+tm)
	else:
		normalshot()
	GPIO.output(21, 0)
	interrupt_configure()
	return 0

def normalshot():
	a = 180-float(subprocess.check_output(cat))
	av = 1
	pa = 0
	while(GPIO.input(20)==1):
		if(GPIO.input(19)!=1 and a > 0):
			a += 1 
		if(GPIO.input(16)!=1 and a < 180):
			a -= 1
		servo.set_servo_pulsewidth(18, toAng(a))
		time.sleep(0.02)
	shutter(2592,1944, modtop[mode])
	tm = datetime.now().strftime('%H:%M.%S')  +"-"+ modtop[mode]
	todaydate = datetime.now().strftime('%Y/%m/%d/')
	os.system(BINPATH+"flip ./sample.jpg")
	os.system("mv ./sample.jpg ./"+tm+".jpg")
	os.system("mkdir -p /var/www/html/Public/tmp/img/"+todaydate)
	os.system("mv ./"+tm+".jpg /var/www/html/Public/tmp/img/"+todaydate)	
	print("save to rasteyo.local/img/"+todaydate+tm)


def toAng(angle):
	return int(angle/180.0*2000)+500

def turn(ang):
	servo.set_servo_pulsewidth(18, toAng(ang))
	time.sleep(0.02)

def marge(numlst):
	num = [str(i) for i in numlst]
	s = str(numlst[0])
	t = str(numlst[1])
	cat= s + t
	os.system(BINPATH+"panorama "+ s + ".jpg "+t+ ".jpg "+cat+ ".jpg ")
	return int(cat)

def move_shot():
	ang = float(subprocess.check_output(cat))
	if(ang<10): 
		ang = 10
	if(ang>170):
		ang = 170
	servo.set_servo_pulsewidth(18, toAng(ang))
	ang -= 10 
	for i in range(1,3):
		servo.set_servo_pulsewidth(18, toAng(ang+20*i))
		time.sleep(0.3)
		shutter(effect=modtop[1])	
		os.system("mv sample.jpg "+ str(i) + ".jpg")

main()
